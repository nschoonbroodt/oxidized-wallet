
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getAccounts() : Promise<Result<Account[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_accounts") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createAccount(name: string, accountType: string, parentId: bigint | null, description: string | null, currency: string) : Promise<Result<Account, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_account", { name, accountType, parentId, description, currency }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getAccountTree() : Promise<Result<AccountNode[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_account_tree") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getTransactions(filters: TransactionFilters) : Promise<Result<Transaction[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_transactions", { filters }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getTransaction(id: bigint) : Promise<Result<Transaction, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_transaction", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createSimpleTransaction(description: string, date: string, amountCents: bigint, currencyCode: string, fromAccountId: bigint, toAccountId: bigint) : Promise<Result<Transaction, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_simple_transaction", { description, date, amountCents, currencyCode, fromAccountId, toAccountId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getAccountBalance(accountId: bigint) : Promise<Result<Money, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_account_balance", { accountId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getAccountBalanceWithChildren(accountId: bigint) : Promise<Result<Money, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_account_balance_with_children", { accountId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getNetWorth() : Promise<Result<Money, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_net_worth") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getTotalAssets() : Promise<Result<Money, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_total_assets") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCurrentMonthIncome() : Promise<Result<Money, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_current_month_income") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCurrentMonthExpenses() : Promise<Result<Money, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_current_month_expenses") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getRecentTransactions(limit: number | null) : Promise<Result<Transaction[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_recent_transactions", { limit }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Account = { id: bigint | null; name: string; account_type: AccountType; parent_id: bigint | null; currency: Currency; description: string | null; is_active: boolean; created_at: string; updated_at: string }
export type AccountNode = { account: Account; level: number; path: string }
export type AccountType = "Asset" | "Liability" | "Equity" | "Income" | "Expense"
export type Currency = { code: string; minor_unit_scale: number; symbol: string }
export type EntryType = "Credit" | "Debit"
export type Money = { amount_minor: bigint; currency: Currency }
export type Transaction = { id: bigint | null; description: string; reference: string | null; transaction_date: string; created_at: string; tags: string | null; notes: string | null; entries: TransactionEntry[] }
export type TransactionEntry = { id: bigint | null; transaction_id: bigint; account_id: bigint; amount: Money; entry_type: EntryType; description: string | null; created_at: string }
export type TransactionFilters = { account_id: bigint | null; from_date: string | null; to_date: string | null; limit: number | null; offset: number | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
